plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.protobuf' version '0.8.18'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.10"
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/libs-milestone/' }
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation 'io.grpc:grpc-netty-shaded:1.58.0'
	implementation 'io.grpc:grpc-protobuf:1.58.0'
	implementation 'io.grpc:grpc-stub:1.58.0'
	implementation 'net.devh:grpc-spring-boot-starter:2.13.1.RELEASE'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'io.grpc:grpc-testing:1.57.0'
	testImplementation 'org.mockito:mockito-inline:3.4.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.21.12"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.58.0'
		}
	}
	generateProtoTasks {
		all().each { task ->
			task.plugins {
				grpc {}
			}
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                    'com/exemplo/servicoc/grpc/**', 
                    'com/example/demo/**Generated*',
                    '**/*DTO.class',     
                    '**/*Builder.class',  
                ])
            })
        )
    }
}
